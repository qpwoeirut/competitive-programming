#![allow(non_snake_case, unused_macros)]

use itertools::Itertools;
use proconio::{input, marker::Chars};
use rand::prelude::*;
use std::{
    io::{prelude::*, BufReader},
    ops::RangeBounds,
    process::ChildStdout,
};
use svg::node::element::{Group, Rectangle, Style, Symbol, Title, Use};

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[macro_export]
macro_rules! mat {
	($($e:expr),*) => { Vec::from(vec![$($e),*]) };
	($($e:expr,)*) => { Vec::from(vec![$($e),*]) };
	($e:expr; $d:expr) => { Vec::from(vec![$e; $d]) };
	($e:expr; $d:expr $(; $ds:expr)+) => { Vec::from(vec![mat![$e $(; $ds)*]; $d]) };
}

const DIJ: [(usize, usize); 4] = [(!0, 0), (1, 0), (0, !0), (0, 1)];

#[derive(Clone, Debug)]
pub struct Input {
    N: usize,
    t: (usize, usize),
    b: Vec<Vec<char>>,
    q: Vec<(usize, usize)>,
}

impl std::fmt::Display for Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "{} {} {}", self.N, self.t.0, self.t.1)?;
        for i in 0..self.N {
            writeln!(f, "{}", self.b[i].iter().collect::<String>())?;
        }
        for i in 0..self.q.len() {
            writeln!(f, "{} {}", self.q[i].0, self.q[i].1)?;
        }
        Ok(())
    }
}

pub fn parse_input(f: &str) -> Input {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        N: usize,
        t: (usize, usize),
        b: [Chars; N],
        q: [(usize, usize); N * N - 1],
    }
    Input { N, t, b, q }
}

pub fn read<T: Copy + PartialOrd + std::fmt::Display + std::str::FromStr, R: RangeBounds<T>>(
    token: Option<&str>,
    range: R,
) -> Result<T, String> {
    if let Some(v) = token {
        if let Ok(v) = v.parse::<T>() {
            if !range.contains(&v) {
                Err(format!("Out of range: {}", v))
            } else {
                Ok(v)
            }
        } else {
            Err(format!("Parse error: {}", v))
        }
    } else {
        Err("Unexpected EOF".to_owned())
    }
}

pub struct Output {
    pub out: Vec<Vec<(usize, usize)>>,
}

pub fn parse_output(input: &Input, f: &str) -> Result<Output, String> {
    let mut out = vec![];
    for line in f.lines() {
        let line = line.trim();
        if line.is_empty() {
            continue;
        }
        let mut ss = line.split_whitespace();
        let m = read(ss.next(), 0..=input.N * input.N)?;
        let mut xy = vec![];
        for _ in 0..m {
            xy.push((read(ss.next(), 0..input.N)?, read(ss.next(), 0..input.N)?));
        }
        if ss.next().is_some() {
            return Err(format!("Too many tokens in a line: {}", line));
        }
        out.push(xy);
    }
    Ok(Output { out })
}

pub fn gen(seed: u64) -> Input {
    let mut rng = rand_chacha::ChaCha20Rng::seed_from_u64(seed);
    let N = rng.gen_range(20i32..=40) as usize;
    let s = (0, N / 2);
    let mut b = mat!['.'; N; N];
    let K = rng.gen_range(0..=(N * N / 6) as i32).max(1) as usize;
    let mut k = 0;
    let mut ij = vec![];
    for i in 0..N {
        for j in 0..N {
            if (i, j) != s {
                ij.push((i, j));
            }
        }
    }
    ij.shuffle(&mut rng);
    let mut visited = vec![false; N * N];
    for &(i, j) in &ij {
        b[i][j] = 'T';
        k += 1;
        visited.fill(false);
        let mut stack = vec![s];
        visited[s.0 * N + s.1] = true;
        let mut cnt = 0;
        while let Some((i, j)) = stack.pop() {
            cnt += 1;
            for (di, dj) in DIJ {
                let i2 = i + di;
                let j2 = j + dj;
                if i2 < N && j2 < N && b[i2][j2] == '.' && visited[i2 * N + j2].setmax(true) {
                    stack.push((i2, j2));
                }
            }
        }
        if cnt != N * N - k {
            b[i][j] = '.';
            k -= 1;
        } else {
            if k >= K {
                break;
            }
        }
    }
    ij.shuffle(&mut rng);
    let mut t;
    loop {
        t = (
            rng.gen_range(0..N as i32) as usize,
            rng.gen_range(0..N as i32) as usize,
        );
        if b[t.0][t.1] == '.' && s.0.abs_diff(t.0) + s.1.abs_diff(t.1) >= 5 {
            break;
        }
    }
    Input { N, t, b, q: ij }
}

pub struct Sim {
    pub N: usize,
    pub b: Vec<char>,
    pub p: (usize, usize),
    pub t: (usize, usize),
    pub target: (usize, usize),
    pub revealed: Vec<bool>,
    pub new_revealed: Vec<(usize, usize)>,
    pub dist: Vec<i32>,
    pub q: Vec<(usize, usize)>,
}

impl Sim {
    pub fn new(input: &Input) -> Self {
        let mut revealed = vec![false; input.N * input.N];
        revealed[input.N / 2] = true;
        Self {
            N: input.N,
            b: input.b.iter().flatten().copied().collect(),
            p: (0, input.N / 2),
            t: input.t,
            target: (!0, !0),
            revealed,
            new_revealed: vec![(0, input.N / 2)],
            dist: vec![0; input.N * input.N],
            q: input.q.iter().rev().copied().collect_vec(),
        }
    }
    fn change_target(&mut self, target: (usize, usize)) {
        if self.target == target {
            return;
        }
        self.target = target;
        if target == (!0, !0) {
            return;
        }
        let dist = &mut self.dist;
        dist.fill(i32::MAX);
        let mut que = vec![target];
        let mut qs = 0;
        dist[target.0 * self.N + target.1] = 0;
        while qs < que.len() {
            let (i, j) = que[qs];
            qs += 1;
            for (di, dj) in DIJ {
                let i2 = i + di;
                let j2 = j + dj;
                if i2 < self.N
                    && j2 < self.N
                    && dist[i2 * self.N + j2] == i32::MAX
                    && (!self.revealed[i2 * self.N + j2] || self.b[i2 * self.N + j2] == '.')
                {
                    dist[i2 * self.N + j2] = dist[i * self.N + j] + 1;
                    que.push((i2, j2));
                }
            }
        }
    }
    pub fn step(&mut self, xy: &[(usize, usize)]) -> Result<(), String> {
        self.new_revealed.clear();
        if self.p == self.t {
            return Err("Too many outputs".to_owned());
        }
        for &(i, j) in xy {
            if self.revealed[i * self.N + j] {
                return Err(format!("({}, {}) is already revealed", i, j));
            } else if self.b[i * self.N + j] != '.' {
                return Err(format!("({}, {}) is not empty", i, j));
            } else if (i, j) == self.t {
                return Err(format!("({}, {}) contains the flower", i, j));
            }
            self.b[i * self.N + j] = 't';
        }
        let mut changed = false;
        for (di, dj) in DIJ {
            let mut i2 = self.p.0;
            let mut j2 = self.p.1;
            while i2 < self.N && j2 < self.N {
                if self.revealed[i2 * self.N + j2].setmax(true) {
                    self.new_revealed.push((i2, j2));
                    if self.b[i2 * self.N + j2] != '.' {
                        changed = true;
                    }
                }
                if self.b[i2 * self.N + j2] != '.' {
                    break;
                }
                i2 += di;
                j2 += dj;
            }
        }
        if changed {
            let target = self.target;
            self.target = (!0, !0);
            self.change_target(target);
        }
        if self.revealed[self.t.0 * self.N + self.t.1] {
            self.change_target(self.t);
        }
        if self.target != (!0, !0) && self.dist[self.p.0 * self.N + self.p.1] == i32::MAX {
            self.target = (!0, !0);
        }
        if self.target == (!0, !0)
            || self.target != self.t && self.revealed[self.target.0 * self.N + self.target.1]
        {
            self.change_target(self.p);
            loop {
                if let Some(target) = self.q.pop() {
                    if !self.revealed[target.0 * self.N + target.1]
                        && self.dist[target.0 * self.N + target.1] != i32::MAX
                    {
                        self.change_target(target);
                        break;
                    }
                } else {
                    return Err(format!("Not reachable"));
                }
            }
        }
        let mut min = i32::MAX;
        let mut next_dir = !0;
        for dir in 0..4 {
            let i2 = self.p.0 + DIJ[dir].0;
            let j2 = self.p.1 + DIJ[dir].1;
            if i2 < self.N && j2 < self.N && min.setmin(self.dist[i2 * self.N + j2]) {
                next_dir = dir;
            }
        }
        assert!(next_dir != !0);
        self.p.0 += DIJ[next_dir].0;
        self.p.1 += DIJ[next_dir].1;
        Ok(())
    }
}

pub fn compute_score(input: &Input, out: &Output) -> (i64, String) {
    let (mut score, err, _) = compute_score_details(input, &out.out);
    if err.len() > 0 {
        score = 0;
    }
    (score, err)
}

pub fn compute_score_details(input: &Input, out: &[Vec<(usize, usize)>]) -> (i64, String, Sim) {
    let mut sim = Sim::new(input);
    for t in 0..out.len() {
        if let Err(e) = sim.step(&out[t]) {
            return (0, format!("{} (turn: {})", e, t + 1), sim);
        }
    }
    if sim.p != sim.t {
        (0, format!("Not finished"), sim)
    } else {
        (out.len() as i64, String::new(), sim)
    }
}

/// 0 <= val <= 1
pub fn color(mut val: f64) -> String {
    val.setmin(1.0);
    val.setmax(0.0);
    let (r, g, b) = if val < 0.5 {
        let x = val * 2.0;
        (
            30. * (1.0 - x) + 144. * x,
            144. * (1.0 - x) + 255. * x,
            255. * (1.0 - x) + 30. * x,
        )
    } else {
        let x = val * 2.0 - 1.0;
        (
            144. * (1.0 - x) + 255. * x,
            255. * (1.0 - x) + 30. * x,
            30. * (1.0 - x) + 70. * x,
        )
    };
    format!(
        "#{:02x}{:02x}{:02x}",
        r.round() as i32,
        g.round() as i32,
        b.round() as i32
    )
}

pub fn rect(x: usize, y: usize, w: usize, h: usize, fill: &str) -> Rectangle {
    Rectangle::new()
        .set("x", x)
        .set("y", y)
        .set("width", w)
        .set("height", h)
        .set("fill", fill)
}

pub fn group(title: String) -> Group {
    Group::new().add(Title::new(title))
}

pub fn vis_default(input: &Input, out: &Output) -> (i64, String, String) {
    let (mut score, err, svg) = vis(input, &out.out);
    if err.len() > 0 {
        score = 0;
    }
    (score, err, svg)
}

fn read_line(stdout: &mut BufReader<ChildStdout>, local: bool) -> Result<String, String> {
    loop {
        let mut out = String::new();
        match stdout.read_line(&mut out) {
            Ok(0) | Err(_) => {
                return Err(format!("Your program has terminated unexpectedly"));
            }
            _ => (),
        }
        if local {
            print!("{}", out);
        }
        let v = out.trim();
        if v.len() == 0 {
            continue;
        }
        return Ok(v.to_owned());
    }
}

// https://www.svgrepo.com/svg/295675/flower
const FLOWER: &str = r#"<g>
<path style="fill:#54B558;" d="M320.272,400.681c-16.754,3.998-188.126-71.815-204.288-71.411
	C29.981,205.233,88.378,66.42,88.378,66.42c14.945,73.58,82.225,90.559,133.995,132.032
	C285.904,237.635,306.321,390.571,320.272,400.681z"/>
<path style="fill:#67CE6F;" d="M329.825,446.537c-22.246,22.955-54.11,38.023-86.176,36.861
	C59.231,476.653,9.575,304.44,8.876,301.98c15.952,29.516,57.079,28.538,107.108,27.29c16.161-0.406,33.258-0.828,50.74-0.27
	c97.025-25.431,196.717-11.978,206.827-25.931C376.961,317.346,357.103,428.299,329.825,446.537z"/>
<path style="fill:#F24141;" d="M470.902,359.79c-8.737-13.068-22.976-26.487-39.459-37.437c19.159-4.964,37.01-12.994,49.54-22.485
	c67.332-51.006-40.423-73.338-40.423-73.338s2.561-105.881-59.642-58.767c-9.419,7.141-18.831,17.373-27.168,29.262
	c-3.971-13.969-9.521-26.714-16.087-36.518c-46.951-70.224-75.595,36.022-75.595,36.022s-105.548-8.794-62.177,56.091
	c7.678,11.468,19.591,23.223,33.542,33.333c-16.754,3.998-32.254,10.309-43.735,17.985c-70.224,46.951,36.024,75.582,36.024,75.582
	s-8.798,105.561,56.091,62.177c11.465-7.665,23.221-19.578,33.331-33.529c4.011,16.757,10.322,32.257,17.987,43.722
	c46.948,70.237,75.595-36.022,75.595-36.022S514.277,424.649,470.902,359.79z"/>
<path style="fill:#D83535;" d="M387.828,383.345c-1.854-0.368-4.976-2.15-8.855-4.828c-46.062-31.814-63.653-91.372-43.406-143.563
	c8.684-22.386,18.183-37.928,18.183-37.928c-3.971-13.969-9.521-26.714-16.087-36.518c-3.783-5.659-7.445-10.155-10.984-13.671
	c0.034,0.146,0.076,0.289,0.109,0.434c10.179,43.843-25.565,94.756-25.565,94.756c-16.804-47.692-39.152-45.5-39.152-45.5
	l0.001-0.007c0,0.001-0.002,0.011-0.002,0.011s-105.548-8.794-62.177,56.091c7.678,11.468,19.591,23.223,33.542,33.333
	c-16.754,3.998-32.254,10.309-43.735,17.985c-70.224,46.951,36.024,75.582,36.024,75.582s-8.798,105.561,56.091,62.177
	c11.465-7.665,23.221-19.578,33.331-33.529c4.011,16.757,10.322,32.257,17.987,43.722
	C328.847,375.314,387.828,383.345,387.828,383.345z"/>
<ellipse transform="matrix(-0.1948 0.9808 -0.9808 -0.1948 593.1321 -339.1942)" style="fill:#F2D546;" cx="435.792" cy="73.86" rx="45.961" ry="22.193"/>
<path d="M99.503,311.026c1.396,0,2.813-0.33,4.134-1.027c4.336-2.287,5.995-7.656,3.707-11.99
	c-30.538-57.874-31.898-116.655-27.662-155.776c2.009-18.556,5.431-34.587,8.672-46.81c6.507,14.493,15.769,27.518,27.955,39.382
	c3.511,3.42,9.129,3.346,12.549-0.167c3.42-3.512,3.344-9.13-0.167-12.55c-16.967-16.519-27.015-34.77-31.618-57.435
	c-0.775-3.816-3.946-6.681-7.82-7.065c-3.876-0.385-7.547,1.801-9.057,5.39c-0.534,1.268-13.118,31.567-18.094,76.725
	c-4.598,41.741-3.206,104.525,29.542,166.589C93.237,309.306,96.317,311.026,99.503,311.026z"/>
<path d="M384.679,310.161c0.769,0.206,1.542,0.304,2.303,0.304c3.919,0,7.504-2.615,8.567-6.58c1.268-4.734-1.542-9.601-6.276-10.87
	c-3.062-0.82-6.119-1.51-9.088-2.049c-4.822-0.877-9.442,2.32-10.321,7.142c-0.877,4.822,2.32,9.443,7.142,10.321
	C379.501,308.882,382.081,309.466,384.679,310.161z"/>
<path d="M511.289,261.957c-3.078-13.641-16.022-25.275-38.471-34.579c-8.997-3.729-17.675-6.314-23.453-7.844
	c-0.183-5.898-0.736-14.776-2.31-24.237c-3.201-19.255-9.276-32.922-18.101-40.773c2.041-8.652,3.895-17.738,5.514-27.302
	c14.01-3.9,26.791-22.203,31.781-47.327c6.089-30.663-2.419-56.389-19.792-59.839c-9.336-1.858-18.866,2.943-26.831,13.51
	c-6.591,8.743-11.679,20.898-14.325,34.224c-5.052,25.434-0.052,47.457,11.712,56.203c-1.357,8.03-2.891,15.688-4.562,23.013
	c-10.83-1.263-23.19,3.307-36.901,13.692c-6.308,4.783-12.628,10.837-18.689,17.867c-3.423-8.617-7.417-16.404-11.822-22.993
	c-1.95-2.918-3.932-5.636-5.889-8.08c-3.064-3.824-8.649-4.444-12.474-1.38c-3.826,3.064-4.443,8.649-1.38,12.474
	c1.641,2.048,3.319,4.353,4.989,6.85c5.389,8.061,10.102,18.41,13.75,30.096c-14.318,21.503-23.916,45.654-26.486,66.873
	c-0.589,4.866,2.878,9.288,7.743,9.877c4.868,0.588,9.288-2.878,9.877-7.743c2.374-19.607,11.796-42.36,25.85-62.422
	c7.949-11.344,16.683-20.776,25.25-27.273c6.372-4.825,14.631-9.85,21.728-10.225c-12.206,43.731-29.285,73.298-43.07,91.739
	c-15.664,20.955-29.849,31.516-35.083,35.01c-1.414-1.768-2.801-3.772-4.131-6.08c-2.447-4.247-7.874-5.703-12.121-3.256
	c-4.246,2.447-5.705,7.874-3.256,12.12c13.772,23.893,33.06,27.118,42.471,27.118c3.206,0,5.267-0.374,5.571-0.434
	c4.811-0.937,7.952-5.596,7.016-10.407c-0.936-4.811-5.593-7.952-10.407-7.016c-0.084,0.017-4.263,0.758-9.941-1.054
	c17.142-12.967,55.198-49.026,78.144-126.144c6.58,13.453,8.83,35.598,8.496,50.103c-0.104,4.287,2.872,8.035,7.07,8.904
	c16.533,3.427,51.783,15.428,55.217,30.645c2.074,9.193-8.836,19.717-18.354,26.926c-10.633,8.055-26.031,15.233-42.689,19.957
	c-4.946-3.135-10.008-6.034-15.106-8.616c-4.371-2.214-9.712-0.466-11.928,3.907c-2.215,4.372-0.465,9.712,3.907,11.928
	c5.661,2.867,11.29,6.154,16.731,9.772c15.557,10.341,29.039,23.091,36.986,34.978c5.857,8.761,11.887,20.825,7.348,28.543
	c-7.686,13.068-41.751,15.38-61.411,13.768c-4.268-0.356-8.188,2.395-9.305,6.534c-4.394,16.301-18.446,50.782-33.84,53.313
	c-9.298,1.525-19.167-9.985-25.805-19.914c-6.418-9.6-11.95-22.633-15.758-37.019c13.285-19.206,22.434-40,25.879-58.958
	c0.877-4.823-2.322-9.442-7.145-10.318c-4.823-0.878-9.441,2.322-10.318,7.145c-3.139,17.274-12.328,37.372-25.209,55.144
	c-9.593,13.243-20.632,24.384-31.08,31.37c-8.765,5.86-20.832,11.89-28.549,7.351c-13.067-7.687-15.376-41.751-13.762-61.413
	c0.356-4.273-2.394-8.19-6.534-9.305c-16.301-4.394-50.782-18.448-53.315-33.841c-1.53-9.301,9.985-19.167,19.914-25.805
	c9.6-6.418,22.634-11.95,37.019-15.758c19.208,13.285,40.004,22.432,58.96,25.878c0.537,0.098,1.071,0.146,1.597,0.146
	c4.207,0,7.942-3.004,8.721-7.289c0.877-4.823-2.322-9.441-7.145-10.318c-17.275-3.14-37.373-12.328-55.145-25.209
	c-13.242-9.593-24.383-20.631-31.369-31.079c-5.86-8.763-11.891-20.831-7.351-28.549c7.686-13.068,41.749-15.379,61.413-13.762
	c4.28,0.359,8.19-2.394,9.305-6.534c0.041-0.151,4.182-15.358,11.73-29.868c4.936-9.485,14.823-25.146,25.582-23.452
	c4.84,0.766,9.385-2.544,10.148-7.386c0.763-4.842-2.544-9.385-7.386-10.148c-20.654-3.254-35.373,16.038-44.09,32.794
	c-5.192,9.981-8.896,20.091-11.019,26.547c-5.9-0.163-14.795-0.136-24.333,0.878c-2.253,0.239-4.409,0.536-6.515,0.861
	c-13.856-10.732-28.579-19.87-42.861-28.707c-10.234-6.332-19.902-12.313-29.172-18.791c-4.017-2.807-9.55-1.826-12.358,2.191
	c-2.808,4.018-1.826,9.55,2.191,12.358c9.676,6.761,20.008,13.154,30,19.335c10.103,6.251,20.43,12.66,30.373,19.6
	c-8.438,3.723-14.576,8.747-18.298,15.068c-5.726,9.721-5.41,21.476,0.859,35.043c-43.43-31.02-65.808-81.321-66.186-82.186
	c-1.948-4.495-7.17-6.561-11.67-4.617c-4.498,1.948-6.565,7.173-4.618,11.671c1.461,3.375,36.337,82.297,107.664,108.58
	c1.277,1.209,2.584,2.41,3.925,3.6c-11.331,3.929-21.595,8.839-29.836,14.349c-11.377,7.607-19.296,15.437-23.73,23.424
	c-15.799-0.316-31.362,0.069-45.274,0.418c-47.719,1.188-85.437,2.128-98.945-22.392c-0.167-0.336-0.355-0.664-0.566-0.979
	c-2.409-3.613-7.071-4.939-11.028-3.153c-3.957,1.784-6.04,6.184-4.926,10.38c0.014,0.053,0.028,0.106,0.044,0.16
	c0.575,2.019,13.635,46.879,50.11,92.227c21.317,26.502,46.373,47.919,74.474,63.652c35.05,19.623,74.885,30.38,118.401,31.973
	c1.24,0.045,2.483,0.067,3.727,0.067c28.472,0,57.902-11.694,81.123-32.013c11.683,16.25,23.868,24.455,36.321,24.455
	c1.561,0,3.127-0.129,4.695-0.387c13.798-2.27,26.174-14.505,36.783-36.367c4.252-8.761,7.344-17.271,9.211-22.95
	c5.9,0.163,14.795,0.134,24.334-0.88c23.875-2.538,39.567-9.912,46.638-21.919c7.403-12.57,4.751-28.525-7.884-47.422
	c-6.662-9.963-16.158-20.026-27.473-29.249c13.7-5.012,25.967-11.418,35.533-18.664
	C506.229,291.872,514.624,276.738,511.289,261.957z M422.711,71.247c2.105-10.601,6.147-20.443,11.09-26.998
	c3.598-4.773,6.965-6.822,8.799-6.822c0.143,0,0.277,0.012,0.401,0.037c3.149,0.626,10.89,13.539,5.84,38.972
	c-5.05,25.431-17.114,34.403-20.29,33.783C425.401,109.593,417.66,96.679,422.711,71.247z M243.972,474.53
	c-40.671-1.487-77.806-11.487-110.374-29.722c-26.108-14.617-49.43-34.565-69.315-59.288c-15.827-19.677-26.92-39.126-34.33-54.54
	c22.407,8.754,52.864,7.996,86.254,7.163c13.195-0.331,26.765-0.661,40.717-0.476c0.065,0.776,0.153,1.552,0.28,2.33
	c2.27,13.8,14.505,26.174,36.367,36.784c8.761,4.252,17.27,7.344,22.949,9.211c-0.04,1.45-0.069,3.081-0.075,4.856
	c-52.538,4.759-116.241-24.622-117.079-25.013c-4.437-2.079-9.722-0.166-11.801,4.273c-2.079,4.439-0.166,9.722,4.273,11.801
	c0.766,0.359,19.068,8.878,44.743,16.334c24.972,7.252,47.647,10.895,67.713,10.895c4.443,0,8.745-0.198,12.929-0.556
	c0.054,0.579,0.114,1.16,0.175,1.744c2.537,23.877,9.91,39.568,21.916,46.641c4.635,2.73,9.727,4.092,15.259,4.092
	c9.475,0,20.238-4,32.17-11.977c8.24-5.509,16.701-13.118,24.662-22.087c2.199,6.341,4.706,12.344,7.454,17.849
	C297.653,464.459,270.105,475.477,243.972,474.53z"/>
<path d="M109.223,266.701c-0.553,4.87,2.948,9.266,7.818,9.818l31.665,3.591c0.34,0.039,0.677,0.057,1.011,0.057
	c4.454,0,8.294-3.345,8.807-7.875c0.553-4.87-2.948-9.266-7.818-9.818l-31.665-3.591
	C114.169,258.329,109.776,261.832,109.223,266.701z"/>
<path d="M118.543,214.233l-13.628-2.707c-4.81-0.954-9.479,2.169-10.433,6.977c-0.954,4.808,2.169,9.478,6.977,10.433l13.628,2.707
	c0.583,0.116,1.164,0.172,1.738,0.172c4.147,0,7.856-2.924,8.695-7.148C126.473,219.859,123.35,215.188,118.543,214.233z"/>
<path d="M193.362,420.508c-3.7-3.215-9.305-2.819-12.52,0.88l-13.992,16.108c-3.214,3.7-2.82,9.305,0.88,12.52
	c1.68,1.459,3.752,2.175,5.816,2.175c2.481,0,4.95-1.035,6.705-3.055l13.992-16.108
	C197.457,429.329,197.063,423.723,193.362,420.508z"/>
</g>"#;

// https://www.svgrepo.com/svg/193618/tree
const TREANT: &str = r#"<g>
<polygon style="fill:#5A3C3D;" points="331.454,128.361 180.541,128.361 145.766,443.188 255.997,466.871 366.228,443.188 "/>
<path style="opacity:0.2;enable-background:new    ;" d="M244.599,269.762c-4.451,0-8.057-3.606-8.057-8.057v-26.486
	c0-4.451,3.606-8.057,8.057-8.057s8.057,3.606,8.057,8.057v26.486C252.656,266.155,249.049,269.762,244.599,269.762z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M327.638,451.245c-4.451,0-8.057-3.606-8.057-8.057v-23.11
	c0-4.451,3.606-8.057,8.057-8.057c4.451,0,8.057,3.606,8.057,8.057v23.11C335.695,447.639,332.089,451.245,327.638,451.245z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M181.207,426.118c-4.451,0-8.057-3.606-8.057-8.057v-16.185
	c0-4.451,3.606-8.057,8.057-8.057c4.451,0,8.057,3.606,8.057,8.057v16.185C189.264,422.512,185.657,426.118,181.207,426.118z"/>
<path style="fill:#6CC04A;" d="M385.032,60.522c-1.72,0-3.422,0.071-5.115,0.176c-12.113-15.577-31.019-25.611-52.28-25.611
	c-2.927,0-5.803,0.209-8.631,0.579c-15.667-16.971-38.093-27.608-63.01-27.608c-24.917,0-47.343,10.638-63.01,27.608
	c-2.828-0.37-5.705-0.579-8.631-0.579c-21.26,0-40.167,10.034-52.28,25.611c-1.693-0.105-3.395-0.176-5.115-0.176
	c-45.219,0-81.877,36.658-81.877,81.878s36.657,81.876,81.877,81.876c19.046,0,36.557-6.521,50.467-17.428
	c10.353,6.708,22.687,10.617,35.941,10.617c16.241,0,31.11-5.858,42.628-15.562c11.519,9.704,26.386,15.562,42.628,15.562
	c13.254,0,25.588-3.909,35.941-10.617c13.909,10.906,31.421,17.428,50.467,17.428c45.219,0,81.877-36.656,81.877-81.876
	S430.252,60.522,385.032,60.522z"/>
<path style="opacity:0.3;enable-background:new    ;" d="M199.757,261.704c-10.343,10.342-10.343,27.107-0.002,37.449
	c10.34,10.34,27.107,10.342,37.449,0L199.757,261.704z"/>
<path style="opacity:0.3;enable-background:new    ;" d="M312.238,261.704c10.343,10.342,10.343,27.107,0.002,37.449
	c-10.34,10.34-27.107,10.342-37.449,0L312.238,261.704z"/>
<polygon style="opacity:0.3;enable-background:new    ;" points="256.001,353.369 276.599,343.861 304.327,349.407 329.416,331.448 
	320.001,372.383 292.167,396.66 276.863,390.868 256.001,407.855 235.138,390.868 219.834,396.66 192,372.383 182.585,331.448 
	207.672,349.407 235.402,343.861 "/>
<path style="opacity:0.2;enable-background:new    ;" d="M399.037,125.775c-15.468-15.47-42.014-14.006-42.014-14.006
	s-1.464,26.545,14.005,42.013c15.468,15.47,42.013,14.003,42.013,14.003S414.506,141.243,399.037,125.775z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M244.494,102.789c0,21.874,19.806,39.61,19.806,39.61
	s19.805-17.735,19.805-39.61S264.3,63.178,264.3,63.178S244.494,80.912,244.494,102.789z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M131.762,137.085c-15.468,15.468-14.005,42.013-14.005,42.013
	s26.545,1.464,42.013-14.006c15.469-15.468,14.005-42.013,14.005-42.013S147.231,121.616,131.762,137.085z"/>
<g>
	<path style="fill:#5A3C3D;" d="M91.124,460.377c-9.493,0-17.189-7.694-17.189-17.189c0-14.352-11.677-26.03-26.028-26.03
		c-9.493,0-17.189-7.694-17.189-17.189c0-9.492,7.696-17.189,17.189-17.189c33.308,0,60.406,27.101,60.406,60.408
		C108.312,452.683,100.616,460.377,91.124,460.377z"/>
	<path style="fill:#5A3C3D;" d="M411.208,460.377c9.492,0,17.189-7.694,17.189-17.189c0-14.352,11.677-26.03,26.029-26.03
		c9.492,0,17.189-7.694,17.189-17.189c0-9.492-7.696-17.189-17.189-17.189c-33.308,0-60.407,27.101-60.407,60.408
		C394.019,452.683,401.716,460.377,411.208,460.377z"/>
</g>
<path style="fill:#6CC04A;" d="M501.023,475.602c0-17.902-14.509-32.414-32.412-32.414H43.39c-17.901,0-32.413,14.512-32.413,32.414
	v28.341h490.046L501.023,475.602L501.023,475.602z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M466.909,473.081c0-4.621-3.743-8.359-8.358-8.359
	c-4.613,0-8.356,3.739-8.356,8.359c0,4.614,3.742,8.355,8.356,8.355C463.166,481.437,466.909,477.693,466.909,473.081z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M95.93,473.081c0-4.621-3.743-8.359-8.358-8.359
	c-4.613,0-8.356,3.739-8.356,8.359c0,4.614,3.742,8.355,8.356,8.355C92.187,481.437,95.93,477.693,95.93,473.081z"/>
<path style="opacity:0.2;enable-background:new    ;" d="M402.203,475.23c0-4.621-3.743-8.359-8.358-8.359
	c-4.613,0-8.356,3.739-8.356,8.359c0,4.614,3.742,8.355,8.356,8.355C398.459,483.586,402.203,479.842,402.203,475.23z"/>
<path style="fill:#1E252B;" d="M333.884,324.743c-2.787-1.857-6.434-1.796-9.157,0.153l-22.247,15.925l-24.301-4.86
	c-1.674-0.335-3.409-0.129-4.956,0.586l-17.222,7.948l-17.222-7.948c-1.548-0.714-3.285-0.921-4.956-0.586l-24.302,4.86
	l-22.246-15.924c-2.722-1.948-6.371-2.009-9.157-0.153c-2.788,1.857-4.135,5.247-3.384,8.511l9.415,40.935
	c0.38,1.657,1.276,3.15,2.557,4.267l27.834,24.277c2.239,1.952,5.37,2.516,8.147,1.463l10.963-4.149l17.264,14.057
	c1.481,1.206,3.284,1.81,5.087,1.81c1.804,0,3.605-0.603,5.087-1.81l17.264-14.057l10.963,4.149c2.778,1.052,5.91,0.489,8.148-1.463
	l27.834-24.277c1.281-1.117,2.175-2.611,2.557-4.267l9.415-40.935C338.019,329.99,336.672,326.602,333.884,324.743z
	 M312.734,368.029l-22.228,19.388l-10.791-4.084c-2.686-1.017-5.71-0.526-7.939,1.288l-15.776,12.844l-15.776-12.844
	c-1.46-1.189-3.263-1.81-5.088-1.81c-0.959,0-1.925,0.171-2.85,0.521l-10.791,4.084l-22.228-19.388l-4.055-17.634l7.773,5.564
	c1.813,1.297,4.083,1.788,6.27,1.349l25.156-5.032l18.216,8.407c2.142,0.988,4.61,0.988,6.752,0l18.216-8.407l25.155,5.032
	c2.186,0.438,4.456-0.053,6.27-1.349l7.774-5.565L312.734,368.029z M468.612,435.131h-30.229c2.961-5.871,9.031-9.916,16.043-9.916
	c13.921,0,25.246-11.325,25.246-25.246s-11.325-25.246-25.246-25.246c-35.022,0-63.971,26.442-67.973,60.408h-13.001L350.282,225.37
	c10.888,4.581,22.616,6.961,34.751,6.961c49.59,0,89.934-40.344,89.934-89.933c0-49.59-40.344-89.935-89.934-89.935
	c-0.476,0-0.957,0.004-1.448,0.015c-14.13-16.227-34.291-25.45-55.946-25.45c-1.818,0-3.677,0.073-5.559,0.218
	C304.571,9.882,280.718,0,255.997,0s-48.573,9.882-66.082,27.247c-1.882-0.145-3.741-0.218-5.559-0.218
	c-21.656,0-41.816,9.223-55.946,25.45c-0.491-0.011-0.971-0.015-1.448-0.015c-49.59,0-89.934,40.345-89.934,89.935
	c0,49.589,40.344,89.933,89.934,89.933c12.139,0,23.868-2.383,34.758-6.965L138.55,435.132h-22.67
	c-4.003-33.966-32.951-60.408-67.973-60.408c-13.921,0-25.246,11.325-25.246,25.246c0,13.921,11.325,25.246,25.246,25.246
	c7.011,0,13.082,4.046,16.042,9.916H43.39c-22.314,0-40.47,18.155-40.47,40.471v28.341c0,4.451,3.606,8.057,8.057,8.057h490.046
	c4.451,0,8.057-3.606,8.057-8.057v-28.341C509.081,453.285,490.927,435.131,468.612,435.131z M454.426,390.837
	c5.035,0,9.132,4.096,9.132,9.132c0,5.034-4.096,9.132-9.132,9.132c-16.019,0-29.485,11.113-33.115,26.03h-18.612
	C406.585,410.076,428.3,390.837,454.426,390.837z M126.962,216.218c-40.704,0-73.819-33.114-73.819-73.818
	c0-40.705,33.115-73.82,73.819-73.82c1.378,0,2.845,0.052,4.616,0.16c2.661,0.169,5.225-0.994,6.859-3.096
	c11.119-14.299,27.855-22.499,45.919-22.499c2.439,0,4.991,0.172,7.588,0.511c2.593,0.342,5.189-0.602,6.965-2.525
	c14.676-15.899,35.484-25.016,57.088-25.016s42.413,9.118,57.09,25.016c1.774,1.923,4.375,2.866,6.964,2.525
	c2.597-0.338,5.149-0.511,7.588-0.511c18.063,0,34.801,8.201,45.919,22.499c1.633,2.101,4.199,3.267,6.859,3.096
	c1.77-0.109,3.238-0.16,4.616-0.16c40.704,0,73.819,33.115,73.819,73.82c0,40.704-33.115,73.818-73.819,73.818
	c-16.655,0-32.387-5.433-45.495-15.712c-1.454-1.14-3.21-1.717-4.973-1.717c-1.519,0-3.043,0.429-4.38,1.296
	c-9.412,6.099-20.325,9.322-31.56,9.322c-13.68,0-26.976-4.854-37.437-13.667c-2.998-2.529-7.384-2.529-10.382,0
	c-10.46,8.814-23.756,13.667-37.437,13.667c-11.235,0-22.148-3.223-31.56-9.322c-2.888-1.871-6.646-1.701-9.353,0.421
	C159.349,210.785,143.617,216.218,126.962,216.218z M178.856,217c10.614,5.586,22.416,8.521,34.513,8.521
	c15.283,0,30.19-4.743,42.628-13.463c12.437,8.72,27.345,13.463,42.628,13.463c12.099,0,23.903-2.935,34.519-8.525l24.094,218.134
	H154.763L178.856,217z M47.907,409.1c-5.035,0-9.132-4.097-9.132-9.132c0-5.035,4.096-9.132,9.132-9.132
	c26.126,0,47.841,19.239,51.727,44.293H81.022C77.392,420.212,63.926,409.1,47.907,409.1z M492.966,495.885H19.035v-20.284
	c0-13.43,10.926-24.357,24.355-24.357h425.221c13.429,0,24.354,10.927,24.354,24.357V495.885z M218.48,314.968h0.001
	c9.225,0,17.898-3.594,24.421-10.116c3.147-3.148,3.147-8.248,0-11.394l-37.447-37.449c-3.147-3.147-8.248-3.148-11.394-0.001
	c-13.467,13.465-13.468,35.378-0.003,48.845C200.581,311.375,209.254,314.967,218.48,314.968z M201.07,274.412l23.436,23.438
	c-1.912,0.66-3.943,1.003-6.025,1.003c-4.922,0-9.549-1.917-13.028-5.395C200.311,288.316,198.851,280.866,201.07,274.412z
	 M293.515,314.968c9.226,0,17.899-3.594,24.422-10.117c13.465-13.466,13.464-35.379-0.003-48.844
	c-3.146-3.146-8.247-3.147-11.395,0.001l-37.447,37.449c-3.147,3.147-3.147,8.247,0,11.394
	C275.616,311.375,284.289,314.968,293.515,314.968z M310.925,274.412c2.218,6.453,0.758,13.904-4.383,19.044
	c-3.479,3.48-8.106,5.396-13.027,5.396c-2.083,0-4.113-0.343-6.026-1.003L310.925,274.412z"/>
</g>"#;

// https://www.svgrepo.com/svg/196772/tree
const TREE: &str = r#"<g>
<path style="fill:#4BAA62;" d="M287.089,339.871c12.389,10.396,28.366,16.654,45.803,16.654c39.381,0,71.305-31.924,71.305-71.305
	c0-5.455-0.633-10.761-1.793-15.865c20.389-12.549,33.987-35.064,33.987-60.761c0-25.683-13.583-48.185-33.951-60.739
	c0.622-3.787,0.959-7.668,0.959-11.63c0-39.381-31.924-71.305-71.305-71.305c-2.286,0-4.544,0.118-6.775,0.329
	C317.8,33.927,289.627,10.643,256,10.643c-33.689,0-61.901,23.37-69.359,54.777c-2.735-0.318-5.512-0.5-8.332-0.5
	c-39.381,0-71.305,31.924-71.305,71.305c0,4.285,0.399,8.473,1.124,12.549c-19.567,12.714-32.519,34.748-32.519,59.821
	c0,25.697,13.599,48.213,33.987,60.761c-1.16,5.104-1.793,10.409-1.793,15.865c0,39.381,31.924,71.305,71.305,71.305
	c16.748,0,32.148-5.775,44.317-15.44L287.089,339.871z"/>
<g>
	<polygon style="fill:#A18E84;" points="236.026,188.473 281.611,263.503 281.611,433.784 228.399,433.784 228.399,263.503 
		197.003,212.241 	"/>
	<polygon style="fill:#A18E84;" points="304.67,180.491 258.908,226.254 281.611,263.503 327.374,217.74 	"/>
</g>
<path style="fill:#939393;" d="M474.172,459.852c-119.729,0-119.729-32.992-218.172-32.992s-98.444,32.992-218.172,32.992v41.506
	h436.344V459.852z"/>
<g>
	<path style="fill:#231F20;" d="M164.702,267.002l3.539-15.567c1.304-5.732-2.287-11.434-8.018-12.737
		c-5.73-1.305-11.434,2.286-12.737,8.018l-3.539,15.567c-1.304,5.732,2.287,11.434,8.018,12.737
		c0.794,0.181,1.588,0.267,2.369,0.267C159.193,275.287,163.58,271.939,164.702,267.002z"/>
	<path style="fill:#231F20;" d="M181.066,303.214c-0.644,0.066-1.304,0.099-1.961,0.099c-0.001,0-0.002,0-0.004,0
		c-2.749,0-5.387-0.602-7.842-1.793c-5.289-2.562-11.656-0.353-14.218,4.936c-2.564,5.29-0.353,11.656,4.936,14.218
		c5.372,2.603,11.133,3.924,17.122,3.924c0.003,0,0.006,0,0.01,0c1.37,0,2.75-0.069,4.106-0.206
		c5.848-0.594,10.107-5.814,9.514-11.662C192.135,306.882,186.912,302.625,181.066,303.214z"/>
	<path style="fill:#231F20;" d="M273.576,77.67c1.172,4.88,5.532,8.16,10.339,8.16c0.823,0,1.659-0.096,2.494-0.296
		c5.715-1.372,9.237-7.118,7.864-12.834c-1.72-7.165-5.388-13.674-10.607-18.82c-4.185-4.128-10.924-4.08-15.051,0.105
		s-4.08,10.924,0.105,15.051C271.106,71.389,272.784,74.374,273.576,77.67z"/>
	<path style="fill:#231F20;" d="M223.666,93.765c0.827,0.197,1.654,0.289,2.467,0.289c4.818,0,9.185-3.294,10.346-8.186l1.937-8.156
		c0.37-1.563,0.941-3.063,1.695-4.457c2.796-5.17,0.871-11.629-4.3-14.425c-5.168-2.794-11.628-0.871-14.424,4.3
		c-1.642,3.037-2.881,6.29-3.682,9.668l-1.936,8.155C214.411,86.671,217.947,92.408,223.666,93.765z"/>
	<path style="fill:#231F20;" d="M330.291,303.136c-4.152-0.573-7.185-2.506-8.999-4.028c-4.504-3.779-11.216-3.191-14.993,1.311
		c-3.778,4.502-3.192,11.215,1.311,14.993c3.957,3.32,10.6,7.544,19.775,8.809c0.493,0.067,0.982,0.101,1.467,0.101
		c5.233,0,9.794-3.861,10.53-9.19C340.184,309.31,336.114,303.938,330.291,303.136z"/>
	<path style="fill:#231F20;" d="M371.269,276.432c-1.305-5.732-7.009-9.323-12.738-8.016c-5.731,1.305-9.32,7.008-8.016,12.739
		c0.118,0.521,0.216,1.049,0.289,1.571c0.754,5.313,5.309,9.15,10.523,9.15c0.497,0,1-0.034,1.508-0.106
		c5.819-0.825,9.868-6.212,9.043-12.031C371.724,278.637,371.518,277.525,371.269,276.432z"/>
	<path style="fill:#231F20;" d="M474.172,449.209c-61.211,0-90.059-8.766-117.958-17.245c-19.061-5.792-37.37-11.352-63.961-14.051
		v-61.537c12.302,7.019,26.319,10.793,40.639,10.793c45.186,0,81.948-36.761,81.948-81.948c0-3.644-0.248-7.304-0.741-10.945
		c20.751-15.437,32.934-39.487,32.934-65.682c0-26.321-12.309-50.485-33.252-65.914c0.172-2.16,0.26-4.318,0.26-6.456
		c0-44.833-36.192-81.373-80.893-81.941C321.625,21.922,291.052,0,256,0c-35.078,0-65.627,21.911-77.147,54.279
		c-0.181-0.001-0.363-0.002-0.544-0.002c-45.186,0-81.948,36.761-81.948,81.948c0,2.514,0.121,5.056,0.362,7.605
		c-20.004,15.485-31.757,39.222-31.757,64.764c0,26.194,12.184,50.245,32.934,65.682c-0.493,3.641-0.741,7.301-0.741,10.945
		c0,45.186,36.761,81.948,81.948,81.948c13.722,0,26.852-3.316,38.648-9.66v60.617c-25.518,2.769-43.39,8.194-61.97,13.84
		c-27.899,8.479-56.748,17.245-117.958,17.245c-5.878,0-10.643,4.766-10.643,10.643v41.506c0,5.877,4.765,10.643,10.643,10.643
		h436.344c5.878,0,10.643-4.766,10.643-10.643v-41.506C484.815,453.974,480.05,449.209,474.172,449.209z M306.584,193.627
		c3.245,6.812,7.046,12.983,11.385,18.465l-34.301,34.301l-11.282-18.569L306.584,193.627z M216.805,332.752
		c-10.814,8.59-23.849,13.131-37.697,13.131c-33.45,0-60.662-27.213-60.662-60.662c0-4.499,0.514-9.042,1.529-13.504
		c1.01-4.442-0.92-9.034-4.799-11.423c-18.111-11.147-28.924-30.474-28.924-51.699c0-20.609,10.346-39.636,27.675-50.895
		c3.584-2.329,5.428-6.577,4.68-10.785c-0.636-3.585-0.959-7.182-0.959-10.689c0-33.45,27.213-60.662,60.663-60.662
		c2.292,0,4.616,0.14,7.103,0.429c5.363,0.627,10.337-2.862,11.584-8.112c6.514-27.434,30.777-46.594,59.003-46.594
		c28.156,0,52.405,19.1,58.97,46.448c1.237,5.153,6.072,8.602,11.35,8.112c1.981-0.188,3.923-0.283,5.774-0.283
		c33.449,0,60.662,27.213,60.662,60.662c0,3.264-0.276,6.597-0.819,9.907c-0.699,4.26,1.243,8.519,4.918,10.784
		c18.092,11.151,28.892,30.47,28.892,51.679c0,21.225-10.813,40.552-28.923,51.698c-3.88,2.388-5.809,6.982-4.799,11.423
		c1.014,4.461,1.528,9.005,1.528,13.504c0,33.449-27.213,60.662-60.662,60.662c-14.239,0-28.076-5.031-38.962-14.165
		c-0.53-0.445-1.093-0.824-1.676-1.147v-62.659l40.951-40.951c9.409,7.023,20.325,11.907,32.59,14.496
		c0.741,0.156,1.48,0.232,2.209,0.232c4.923,0,9.344-3.436,10.402-8.447c1.214-5.75-2.464-11.397-8.215-12.611
		c-22.486-4.748-38.476-19.394-47.525-43.532c-7.151-19.073-7.177-37.141-7.176-37.5c0.045-5.87-4.673-10.668-10.546-10.722
		c-0.033,0-0.066,0-0.099,0c-5.832,0-10.587,4.701-10.64,10.546c-0.006,0.715-0.066,14.754,4.478,32.277
		c-0.542,0.369-1.059,0.788-1.54,1.269l-36.134,36.134l-15.119-24.883c5.428-10.677,8.767-23.662,9.968-38.896
		c0.462-5.86-3.914-10.983-9.774-11.445c-5.866-0.478-10.984,3.915-11.445,9.774c-1.818,23.089-9.233,38.971-22.041,47.206
		c-22.156,14.245-54.698,2.711-55.205,2.528c-5.509-2.022-11.617,0.792-13.653,6.299c-2.039,5.513,0.778,11.634,6.292,13.672
		c1.04,0.384,16.254,5.88,35.005,5.88c1.224,0,2.467-0.031,3.719-0.081l28.999,47.35v65.578
		C217.43,332.286,217.112,332.507,216.805,332.752z M237.475,257.944l-26.279-42.908c4.36-1.538,8.664-3.56,12.794-6.202
		c2.913-1.862,5.609-3.978,8.132-6.29l17.175,28.27c0.158,0.332,0.328,0.66,0.521,0.979l21.149,34.697v149.993
		c-4.741-0.171-9.71-0.266-14.969-0.266c-5.994,0-11.63,0.118-16.959,0.339V263.503C239.041,261.54,238.498,259.617,237.475,257.944
		z M463.53,490.715H48.47v-20.308c57.18-0.96,85.785-9.654,113.505-18.077c25.092-7.624,48.792-14.827,94.025-14.827
		s68.933,7.203,94.025,14.827c27.719,8.424,56.325,17.117,113.505,18.077V490.715z"/>
</g>
</g>"#;

// https://www.svgrepo.com/svg/14756/person-silhouette
const HUMAN: &str = r#"<g>
<g id="SVGRepo_iconCarrier"> <g> <path d="M52.65,125.2h19.9c3.3,0,6-2.7,6-6V86.301h3.399c3.301,0,6-2.701,6-6V43.2c0-3.3-2.699-6-6-6H43.25c-3.3,0-6,2.7-6,6 v37.101c0,3.299,2.7,6,6,6h3.4V119.2C46.65,122.5,49.25,125.2,52.65,125.2z"/> <circle cx="62.55" cy="15.7" r="15.7"/> </g> </g>
</g>"#;

pub fn vis(input: &Input, out: &[Vec<(usize, usize)>]) -> (i64, String, String) {
    let D = 600 / input.N;
    let W = D * input.N;
    let H = D * input.N;
    let (score, err, sim) = compute_score_details(input, &out);
    let mut doc = svg::Document::new()
        .set("id", "vis")
        .set("viewBox", (-5, -5, W + 10, H + 10))
        .set("width", W + 10)
        .set("height", H + 10)
        .set("style", "background-color:white");
    doc = doc.add(Style::new(format!(
        "text {{text-anchor: middle;dominant-baseline: central;}}"
    )));
    doc = doc.add(
        Symbol::new()
            .set("id", "flower")
            .set("viewBox", (0, 0, 512.0, 512.0))
            .add(svg::node::Blob::new(FLOWER)),
    );
    doc = doc.add(
        Symbol::new()
            .set("id", "treant")
            .set("viewBox", (0, 0, 512.0, 512.0))
            .add(svg::node::Blob::new(TREANT)),
    );
    doc = doc.add(
        Symbol::new()
            .set("id", "tree")
            .set("viewBox", (0, 0, 512.0, 512.0))
            .add(svg::node::Blob::new(TREE)),
    );
    doc = doc.add(
        Symbol::new()
            .set("id", "human")
            .set("viewBox", (0, 0, 125.2, 125.2))
            .add(svg::node::Blob::new(HUMAN)),
    );
    for i in 0..input.N {
        for j in 0..input.N {
            let mut g = group(format!("({}, {})", i, j));
            let color = if sim.revealed[i * input.N + j] {
                "#d6fed6ff"
            } else {
                "#959995ff"
            };
            g = g.add(
                rect(j * D, i * D, D, D, color)
                    .set("stroke", "black")
                    .set("stroke-width", 1),
            );
            if sim.b[i * input.N + j] == 't' {
                g = g.add(
                    Use::new()
                        .set("x", j * D + D / 8)
                        .set("y", i * D + D / 8)
                        .set("width", D * 3 / 4)
                        .set("height", D * 3 / 4)
                        .set("href", "#treant"),
                );
            } else if sim.b[i * input.N + j] == 'T' {
                g = g.add(
                    Use::new()
                        .set("x", j * D + D / 8)
                        .set("y", i * D + D / 8)
                        .set("width", D * 3 / 4)
                        .set("height", D * 3 / 4)
                        .set("href", "#tree"),
                );
            } else if (i, j) == sim.t {
                g = g.add(
                    Use::new()
                        .set("x", j * D + D / 8)
                        .set("y", i * D + D / 8)
                        .set("width", D * 3 / 4)
                        .set("height", D * 3 / 4)
                        .set("href", "#flower"),
                );
            }
            doc = doc.add(g);
        }
    }
    if sim.target != (!0, !0) {
        doc = doc
            .add(rect(sim.target.1 * D, sim.target.0 * D, D, D, "none"))
            .set("stroke", "red")
            .set("stroke-width", 2);
    }
    doc = doc.add(
        Use::new()
            .set("x", sim.p.1 * D + D / 8)
            .set("y", sim.p.0 * D + D / 8)
            .set("width", D * 3 / 4)
            .set("height", D * 3 / 4)
            .set("href", "#human")
            .set("fill", "#bf2c2cff"),
    );
    (score, err, doc.to_string())
}

pub fn exec(p: &mut std::process::Child, local: bool) -> Result<i64, String> {
    let mut input = String::new();
    std::io::stdin().read_to_string(&mut input).unwrap();
    let input = parse_input(&input);
    let mut stdin = std::io::BufWriter::new(p.stdin.take().unwrap());
    let mut stdout = std::io::BufReader::new(p.stdout.take().unwrap());
    let _ = writeln!(stdin, "{} {} {}", input.N, input.t.0, input.t.1);
    for i in 0..input.N {
        let _ = writeln!(stdin, "{}", input.b[i].iter().collect::<String>());
    }
    let _ = stdin.flush();
    let mut sim = Sim::new(&input);
    let mut turn = 0;
    loop {
        let _ = writeln!(stdin, "{} {}", sim.p.0, sim.p.1);
        if sim.new_revealed.is_empty() {
            let _ = writeln!(stdin, "0");
        } else {
            let _ = writeln!(
                stdin,
                "{} {}",
                sim.new_revealed.len(),
                sim.new_revealed
                    .iter()
                    .map(|&(x, y)| format!("{} {}", x, y))
                    .join(" ")
            );
        }
        let _ = stdin.flush();
        if sim.p == sim.t {
            break;
        }
        let line = read_line(&mut stdout, local)?;
        let mut ss = line.split_whitespace();
        let m = read(ss.next(), 0..=input.N * input.N)?;
        let mut xy = vec![];
        for _ in 0..m {
            xy.push((read(ss.next(), 0..input.N)?, read(ss.next(), 0..input.N)?));
        }
        if ss.next().is_some() {
            return Err(format!("Too many tokens in a line: {}", line));
        }
        sim.step(&xy)?;
        turn += 1;
    }
    p.wait().unwrap();
    Ok(turn)
}
