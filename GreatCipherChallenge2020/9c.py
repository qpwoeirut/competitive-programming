from base64 import b64decode

s = b"=="
for i in range(8):
    if s.decode().startswith('=') or i<8:
        s = s[::-1]
    s = b64decode(s)
    print(s)
    print(len(s))
    print(len(set(s)))

s = b64decode(s[::-1])
print(s)
print(len(s))
print(len(set(s)))
print(set(s))